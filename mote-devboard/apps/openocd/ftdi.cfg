#
# Freescale Kinetis kw2xdxxx devices
#


#
# https://github.com/ntfreak/openocd/blob/master/tcl/interface/ftdi/minimodule-swd.cfg
# https://mindchasers.com/dev/k22-mini-module
# https://wiki.paparazziuav.org/wiki/File:AlternativeFlossJtag.png
# https://www.ftdichip.com/Support/Documents/DataSheets/Modules/DS_FT2232H_Mini_Module.pdf
#
# nSRST defined on pin CN2-13 of the MiniModule (pin ADBUS5 [AD5] on the FT2232H chip)
# This choice is arbitrary. Use other GPIO pin if desired.

interface ftdi
transport select swd
#ftdi_device_desc "FT2232H MiniModule"
ftdi_channel 0
ftdi_vid_pid 0x0403 0x6010


# FT2232H or FT4232H minimodule channel 0 (Channel A)
# Connector  FTDI              Target
# Pin        Name
# ---------  ------            ------
# CN2-11     VIO               VDD_IO (Or connect to CN2-5 on the minimodule instead for a 3V3 interface)
# CN2-2      GND               GND
# CN2-7      ADBUS0 (TCK)      SWCLK
# CN2-9      ADBUS2 (TDI/TDO)  SWDIO
# CN2-10     ADBUS1 (TDO/TDI)  SWDIO
# CN2-14     ADBUS4 (GPIOL0)   nRESET

ftdi_layout_init 0x0000 0x000b
ftdi_layout_signal nSRST -data 0x0010 -oe 0x0010
ftdi_layout_signal SWD_EN -data 0
#ftdi_layout_signal SWDIO_OE -data 0

adapter_khz 1000
reset_config srst_only connect_assert_srst


#
# K21 devices support both JTAG and SWD transports.
#
#source [find target/swj-dp.tcl]
#
#if { [info exists CHIPNAME] } {
#    set _CHIPNAME $CHIPNAME
#} else {
#    set _CHIPNAME kw22d512
#}
#
## Work-area is a space in RAM used for flash programming
#set WORKAREASIZE 0x4000
#
#if { [info exists WORKAREASIZE] } {
#    set _WORKAREASIZE $WORKAREASIZE
#} else {
#    set _WORKAREASIZE 0x1000
#}
#
#if { [info exists ENDIAN] } {
#    set _ENDIAN $ENDIAN
#} else {
#    set _ENDIAN little
#}
#
#if { [info exists CPUTAPID] } {
#    set _CPUTAPID $CPUTAPID
#} else {
#    set _CPUTAPID 0x2ba01477
#}
#
#set _TARGETNAME $_CHIPNAME.cpu
#
#swj_newdap $_CHIPNAME cpu -irlen 4 -expected-id $_CPUTAPID
##swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
#
#target create $_TARGETNAME cortex_m -chain-position $_CHIPNAME.cpu
#
#
#$_CHIPNAME.cpu configure -event examine-start { puts "START..." ; }
#
## It is important that "kinetis mdm check_security" is called for
## 'examine-end' event and not 'eximine-start'. Calling it in 'examine-start'
## causes "kinetis mdm check_security" to fail the first time openocd
## calls it when it tries to connect after the CPU has been power-cycled.
#$_CHIPNAME.cpu configure -event examine-end {
##    OFA => mdm halt command is used when the chipset is stuck in Watchdog loop
##    kinetis mdm halt
#    kinetis mdm check_security
#}
#
#$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0
#
#set _FLASHNAME $_CHIPNAME.flash
#flash bank $_FLASHNAME kinetis 0 0 0 0 $_TARGETNAME
#
##reset_config srst_only srst_nogate connect_assert_srst
#adapter_khz 1000
#
#if {![using_hla]} {
#    # if srst is not fitted use SYSRESETREQ to
#    # perform a soft reset
#    cortex_m reset_config sysresetreq
#}
#
#$_TARGETNAME configure -event reset-init {
#    adapter_khz 24000
#}
#$_TARGETNAME configure -rtos auto
#
